FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04
MAINTAINER Brian Law "bpl.law@gmail.com"

ENV LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        sudo \
        # Based on https://github.com/docker-library/buildpack-deps/tree/master/xenial
        ca-certificates \
        curl \
        wget \
        # build related deps
        bzr \
        git \
        mercurial \
        openssh-client \
        subversion \
        # procps is very common in build systems, and is a reasonably small package
        procps \
        autoconf \
        automake \
        bzip2 \
        file \
        g++ \
        gcc \
        imagemagick \
        libbz2-dev \
        libc6-dev \
        libcurl4-openssl-dev \
        libdb-dev \
        libevent-dev \
        libffi-dev \
        libgdbm-dev \
        libgeoip-dev \
        libglib2.0-dev \
        libjpeg-dev \
        libkrb5-dev \
        liblzma-dev \
        libmagickcore-dev \
        libmagickwand-dev \
        libncurses-dev \
        libpng-dev \
        libpq-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        libtool \
        libwebp-dev \
        libxml2-dev \
        libxslt-dev \
        libyaml-dev \
        make \
        patch \
        xz-utils \
        zlib1g-dev \
        # https://lists.debian.org/debian-devel-announce/2016/09/msg00000.html
        $( \
        # if we use just "apt-cache show" here, it returns zero because "Can't select versions from package 'libmysqlclient-dev' as it is purely virtual", hence the pipe to grep
            if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then \
            echo 'default-libmysqlclient-dev'; \
            else \
            echo 'libmysqlclient-dev'; \
            fi \
        ) \
    && apt-get clean \
    && apt-get autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/*

# setup libnccl links for tensorflow build
# see: https://github.com/tensorflow/tensorflow/commit/1fda7645d132b71b9084b01945795e97e582adcd#diff-ade1d3e4b7c35655f854151d899df62bR1134
RUN cd /usr/local/cuda-* \
    && ln -sf lib64 lib \
    && ln -sf /usr/lib/x86_64-linux-gnu/libnccl.so ./lib/libnccl.so.2 \
    && ln -sf /usr/include/nccl.h ./include/nccl.h

# This updates the global environment for the root user
RUN echo "LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$LIBRARY_PATH" >> /etc/environment
RUN echo "LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH" >> /etc/environment


### dl-deps

# Add Bazel distribution URI as a package source
RUN echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list \
    && curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -

# Install some dependencies
RUN apt-get update && apt-get install -y \
        tcl \
        tk \
        ant \
        apt-utils \
        bazel \
        bc \
        build-essential \
        cmake \
        default-jdk \
        doxygen \
        gfortran \
        golang \
        iptables \
        libav-tools \
        libboost-all-dev \
        libeigen3-dev \
        libfreetype6-dev \
        libhdf5-dev \
        libjpeg-turbo8-dev \
        liblcms2-dev \
        libopenblas-dev \
        liblapack-dev \
        libpng12-dev \
        libprotobuf-dev \
        libsdl2-dev \
        libtiff-dev \
        libtiff5-dev \
        libvncserver-dev \
        libzmq3-dev \
        nano \
        net-tools \
        openmpi-bin \
        pkg-config \
        protobuf-compiler \
        rsync \
        software-properties-common \
        swig \
        unzip \
        vim \
        webp \
        xorg-dev \
        xvfb \
    && apt-get clean \
    && apt-get autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/* \
# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
    && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3

# Install Git LFS
RUN apt-get update \
    && add-apt-repository ppa:git-core/ppa \
    && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
    apt-get install -y git-lfs \
    && git lfs install \
    && apt-get clean \
    && apt-get autoremove \
    && rm -rf /var/cache/apt/archives/* \
    && rm -rf /var/lib/apt/lists/*


# Install opencv
ARG OPENCV_VERSION=3.4.0

RUN apt-get update && apt-get install -y \
        libavcodec-dev \
        libavformat-dev \
        libav-tools \
        libavresample-dev \
        libdc1394-22-dev \
        libgdal-dev \
        libgphoto2-dev \
        libgtk2.0-dev \
        libjasper-dev \
        liblapacke-dev \
        libopencore-amrnb-dev \
        libopencore-amrwb-dev \
        libopenexr-dev \
        libswscale-dev \
        libtbb2 \
        libtbb-dev \
        libtheora-dev \
        libv4l-dev \
        libvorbis-dev \
        libvtk6-dev \
        libx264-dev \
        libxine2-dev \
        libxvidcore-dev \
        qt5-default \
    && apt-get clean \
    && apt-get autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/*

RUN cd ~/ && \
    git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch && \
    git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch && \
    cd opencv && \
    mkdir build && \
    cd build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -DWITH_QT=ON \
        -DWITH_OPENGL=ON \
        -DBUILD_OPENCV_PYTHON=ON \
        -D WITH_CUDA=ON \
        -D CUDA_CUDA_LIBRARY=/usr/local/cuda/lib64/stubs/libcuda.so \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1 \
        -D WITH_CUBLAS=1 \
        -DFORCE_VTK=ON \
        -DWITH_TBB=ON \
        -DWITH_GDAL=ON \
        -DWITH_XINE=ON \
        -DBUILD_EXAMPLES=ON \
        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
        .. && \
    make -j1 && \
    make install && \
    ldconfig && \
 # Remove the opencv folders to reduce image size
    rm -rf ~/opencv*

### tf install

ARG TENSORFLOW_VERSION=v1.12.0
ARG KERAS_VERSION=2.2.4

ENV CI_BUILD_PYTHON python

# Configure the build for our CUDA configuration.
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_CUDA_VERSION 9.2
ENV TF_CUDNN_VERSION 7
ENV TF_NEED_CUDA 1
ENV TF_CUDA_COMPUTE_CAPABILITIES=3.7,7.0

## Add pip
RUN sudo add-apt-repository ppa:jonathonf/python-3.6
RUN apt-get update && apt-get install -y \
        python3.6 \
        python3.6-dev

RUN wget https://bootstrap.pypa.io/get-pip.py \
    && python3.6 get-pip.py \
    && ln -s /usr/bin/python3.6 /usr/local/bin/python3 
    #&& ln -s /usr/local/bin/pip /usr/local/bin/pip3

# install deps for tf build :(
RUN pip3 --no-cache-dir install \
        funcsigs \
        pbr \
        mock \
        wheel \
        keras_applications \
        keras_preprocessing \
        --no-deps \
    && rm -rf /pip_pkg \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache

# Install Keras and tflearn
RUN pip3 --no-cache-dir install \
        git+git://github.com/fchollet/keras.git@${KERAS_VERSION} \
        tflearn==0.3.2 \
    && rm -rf /pip_pkg \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache


### Pytorch install

ENV TORCH_CUDA_ARCH_LIST="3.5;5.2;6.0;6.1;6.2;7.0"

RUN pip3 install \
        typing \
        mkl mkl-devel \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache
RUN wget -q -O magma.tar.bz2 "https://anaconda.org/soumith/magma-cuda92/2.4.0/download/linux-64/magma-cuda92-2.4.0-1.tar.bz2" \
    && mkdir /usr/local/magma \
    && tar xjf magma.tar.bz2 -C /usr/local/magma

RUN export MAX_JOBS=`expr $(nproc) + 1` \
    && git clone https://github.com/pytorch/pytorch \
    && cd pytorch \
    && git checkout v1.0.0 \
    && git submodule update --init \
    && python3 setup.py install \
    && cd .. && rm -rf pytorch

RUN pip3 --no-cache-dir install --upgrade \
        torchvision==0.2.1 \
        tensorboardX==1.5 \
        torchtext \
        fastai \
        pandas \
        matplotlib \
        seaborn \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache

RUN pip3 --no-cache-dir install --upgrade \
        jupyterlab \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache

EXPOSE 8989

COPY run_jupyter.sh /run_jupyter.sh
RUN chown root:root /run_jupyter.sh
RUN chmod 775 /run_jupyter.sh
ENTRYPOINT ["/run_jupyter.sh"]